import { Request, Response } from "express";
import { storage } from "../storage";

export async function exportResults(req: Request, res: Response) {
  try {
    const { format, results: resultIds, options = {} } = req.body;
    
    // Fetch the results
    const results = await Promise.all(
      resultIds.map((id: number) => storage.getSearchResultById(id))
    );
    
    const validResults = results.filter(r => r !== undefined);
    
    if (validResults.length === 0) {
      return res.status(404).json({ message: "No valid results found" });
    }

    switch (format) {
      case 'csv':
        return exportCsv(validResults, res);
      case 'pdf':
      case 'executive':
      case 'pitch':
        return exportPdf(validResults, res, format, options);
      default:
        return res.status(400).json({ message: "Unsupported format" });
    }
  } catch (error) {
    console.error('Export error:', error);
    res.status(500).json({ message: "Export failed" });
  }
}

function exportCsv(results: any[], res: Response) {
  const headers = [
    'Title',
    'Description', 
    'Category',
    'Feasibility',
    'Market Potential',
    'Innovation Score',
    'Market Size',
    'Gap Reason'
  ];
  
  let csv = headers.join(',') + '\n';
  
  results.forEach(result => {
    const row = [
      `"${result.title.replace(/"/g, '""')}"`,
      `"${result.description.replace(/"/g, '""')}"`,
      `"${result.category}"`,
      `"${result.feasibility}"`,
      `"${result.marketPotential}"`,
      result.innovationScore,
      `"${result.marketSize}"`,
      `"${result.gapReason.replace(/"/g, '""')}"`
    ];
    csv += row.join(',') + '\n';
  });
  
  res.setHeader('Content-Type', 'text/csv');
  res.setHeader('Content-Disposition', 'attachment; filename="market-gaps.csv"');
  res.send(csv);
}

function exportPdf(results: any[], res: Response, format: string, options: any) {
  // Generate a comprehensive HTML report that could be converted to PDF
  const title = options.customTitle || "Market Gap Analysis Report";
  const intro = options.customIntro || "";
  const includeDetails = options.includeDetails !== false;
  
  let html = `
    <!DOCTYPE html>
    <html>
    <head>
        <title>${title}</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
            .header { text-align: center; margin-bottom: 40px; border-bottom: 2px solid #3b82f6; padding-bottom: 20px; }
            .title { font-size: 24px; font-weight: bold; color: #1f2937; margin-bottom: 10px; }
            .subtitle { color: #6b7280; font-size: 14px; }
            .intro { background: #f3f4f6; padding: 20px; margin: 20px 0; border-radius: 8px; }
            .result { margin: 30px 0; padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px; }
            .result-title { font-size: 18px; font-weight: bold; color: #1f2937; margin-bottom: 10px; }
            .result-desc { color: #4b5563; margin-bottom: 15px; }
            .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 15px 0; }
            .metric { text-align: center; padding: 10px; background: #f9fafb; border-radius: 6px; }
            .metric-label { font-size: 12px; color: #6b7280; text-transform: uppercase; }
            .metric-value { font-size: 16px; font-weight: bold; color: #1f2937; }
            .gap-reason { background: #fef3c7; padding: 15px; border-radius: 6px; margin-top: 15px; }
            .gap-reason-title { font-weight: bold; color: #92400e; margin-bottom: 5px; }
            .summary { background: #dbeafe; padding: 20px; margin: 30px 0; border-radius: 8px; }
            .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; color: #6b7280; font-size: 12px; }
        </style>
    </head>
    <body>
        <div class="header">
            <div class="title">${title}</div>
            <div class="subtitle">Generated by Unbuilt - AI-Powered Market Gap Analysis</div>
            <div class="subtitle">Date: ${new Date().toLocaleDateString()}</div>
        </div>
  `;

  if (intro) {
    html += `<div class="intro"><strong>Executive Summary:</strong><br>${intro}</div>`;
  }

  // Add summary statistics
  const avgInnovation = results.reduce((acc, r) => acc + r.innovationScore, 0) / results.length;
  const highFeasibility = results.filter(r => r.feasibility === 'high').length;
  const highPotential = results.filter(r => r.marketPotential === 'high').length;

  html += `
    <div class="summary">
        <h3 style="margin-top: 0;">Analysis Summary</h3>
        <p><strong>Total Opportunities Identified:</strong> ${results.length}</p>
        <p><strong>High Feasibility Opportunities:</strong> ${highFeasibility} (${Math.round(highFeasibility/results.length*100)}%)</p>
        <p><strong>High Market Potential:</strong> ${highPotential} (${Math.round(highPotential/results.length*100)}%)</p>
        <p><strong>Average Innovation Score:</strong> ${avgInnovation.toFixed(1)}/10</p>
    </div>
  `;

  // Add individual results
  results.forEach((result, index) => {
    html += `
      <div class="result">
        <div class="result-title">${index + 1}. ${result.title}</div>
        <div class="result-desc">${result.description}</div>
        
        <div class="metrics">
            <div class="metric">
                <div class="metric-label">Feasibility</div>
                <div class="metric-value">${result.feasibility}</div>
            </div>
            <div class="metric">
                <div class="metric-label">Market Potential</div>
                <div class="metric-value">${result.marketPotential}</div>
            </div>
            <div class="metric">
                <div class="metric-label">Innovation Score</div>
                <div class="metric-value">${result.innovationScore}/10</div>
            </div>
            <div class="metric">
                <div class="metric-label">Market Size</div>
                <div class="metric-value">${result.marketSize}</div>
            </div>
        </div>
        
        ${includeDetails ? `
        <div class="gap-reason">
            <div class="gap-reason-title">Why This Gap Exists:</div>
            ${result.gapReason}
        </div>
        ` : ''}
      </div>
    `;
  });

  html += `
        <div class="footer">
            <p>Generated by Unbuilt Technologies - Discover What's Still Unbuilt</p>
            <p>unbuilt.cloud | AI-Powered Market Gap Analysis</p>
        </div>
    </body>
    </html>
  `;

  res.setHeader('Content-Type', 'text/html');
  res.setHeader('Content-Disposition', `attachment; filename="${format}-report.html"`);
  res.send(html);
}

export async function sendEmailReport(req: Request, res: Response) {
  try {
    const { email, results: resultIds, options = {} } = req.body;
    
    // For now, just return success - in production would integrate with email service
    // like SendGrid, Postmark, or AWS SES
    console.log(`Would send report to ${email} with ${resultIds.length} results`);
    
    res.json({ 
      success: true, 
      message: `Report would be sent to ${email}` 
    });
  } catch (error) {
    console.error('Email send error:', error);
    res.status(500).json({ message: "Failed to send email" });
  }
}